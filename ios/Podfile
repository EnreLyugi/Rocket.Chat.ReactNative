require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '13.4'
install! 'cocoapods', :deterministic_uuids => false

prepare_react_native_project!

use_modular_headers!

plugin 'cocoapods-patch'
 
# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...), which will be excluded. To fix this,
# you can also exclude `react-native-flipper` in `react-native.config.js`
#
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
#   }
# }
# ```
# flipper_config = FlipperConfiguration.disabled
# if ENV['NO_FLIPPER'] == '1' then
#   # Explicitly disabled through environment variables
#   flipper_config = FlipperConfiguration.disabled
# elsif podfile_properties.key?('ios.flipper') then
#   # Configure Flipper in Podfile.properties.json
#   if podfile_properties['ios.flipper'] == 'true' then
#     flipper_config = FlipperConfiguration.enabled(["Debug", "Release"])
#   elsif podfile_properties['ios.flipper'] != 'false' then
#     flipper_config = FlipperConfiguration.enabled(["Debug", "Release"], { 'Flipper' => podfile_properties['ios.flipper'] })
#   end
# end

def all_pods
  pod 'simdjson', path: '../node_modules/@nozbe/simdjson', modular_headers: true
  $RNFirebaseAnalyticsWithoutAdIdSupport = true

  
  use_expo_modules!
  config = use_native_modules!

  # use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  # use_frameworks! :linkage => :static # ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Note that if you have use_frameworks! enabled, Flipper will not work if enabled
    # :flipper_configuration => flipper_config
  )

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end

abstract_target 'defaults' do

  all_pods

  target 'RocketChatRN' # Experimental app
  target 'Rocket.Chat' # Official app
  target 'ShareRocketChatRN'
  target 'NotificationService'
end

$static_framework = [ 
  'WatermelonDB',
  'simdjson',
]
pre_install do |installer|
  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
    installer.pod_targets.each do |pod|
      if $static_framework.include?(pod.name)
        def pod.build_type;
        Pod::BuildType.static_library # >= 1.9
      end
    end
  end
end

post_install do |installer|
  # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
  react_native_post_install(
    installer,
    # config[:reactNativePath],
    # :mac_catalyst_enabled => false
  )

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'NO'
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      case target.name
      when 'RCT-Folly'
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      else
        config.build_settings.delete('IPHONEOS_DEPLOYMENT_TARGET')
      end
    end
  end
end
